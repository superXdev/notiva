"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[928],{22540:(e,t,a)=>{a.d(t,{U:()=>o});var l=a(65874);function o(){return(0,l.createBrowserClient)("https://nyywgrzuzvqywowujnwf.supabase.co","eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im55eXdncnp1enZxeXdvd3VqbndmIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTY2NDE0NTQsImV4cCI6MjA3MjIxNzQ1NH0.R8OwfbiPigNA5DhxfgcG3UlmOcLnO51QbhOMXQeF1-w")}},61928:(e,t,a)=>{a.d(t,{NotesProvider:()=>b,b:()=>h});var l=a(30004),o=a(73176),s=a(22540);let r=(0,s.U)(),d=e=>({id:e.id,title:e.title,content:e.content,folderId:e.folder_id,labels:e.labels||[],published:e.published,publishedAt:e.published_at,createdAt:e.created_at,updatedAt:e.updated_at,userId:e.user_id}),n=e=>({id:e.id,name:e.name,parentId:e.parent_id,createdAt:e.created_at,userId:e.user_id}),i=e=>({id:e.id,name:e.name,color:e.color,createdAt:e.created_at,userId:e.user_id}),c=e=>{let t={};return void 0!==e.title&&(t.title=e.title),void 0!==e.content&&(t.content=e.content),void 0!==e.folderId&&(t.folder_id=e.folderId),void 0!==e.labels&&(t.labels=e.labels),void 0!==e.published&&(t.published=e.published,e.published?t.published_at=new Date().toISOString():t.published_at=null),t};class u{static async getNotes(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:10,a=(e-1)*t,{data:l,error:o,count:s}=await r.from("notes").select("*",{count:"exact"}).order("updated_at",{ascending:!1}).range(a,a+t-1);if(o)throw o;return{data:(l||[]).map(d),count:s||0}}static async getNote(e){let{data:t,error:a}=await r.from("notes").select("*").eq("id",e).single();if(a)throw a;return d(t)}static async createNote(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",a=arguments.length>2?arguments[2]:void 0,{data:{user:l},error:o}=await r.auth.getUser();if(o||!l)throw Error("User not authenticated");let{data:s,error:n}=await r.from("notes").insert({title:e,content:t,folder_id:a||null,labels:[],published:!1,user_id:l.id}).select().single();if(n)throw n;return d(s)}static async updateNote(e,t){let a={...c(t),updated_at:new Date().toISOString()},{data:l,error:o}=await r.from("notes").update(a).eq("id",e).select().single();if(o)throw o;return d(l)}static async deleteNote(e){let{error:t}=await r.from("notes").delete().eq("id",e);if(t)throw t}static async getNoteCount(e){let{data:{user:t},error:a}=await r.auth.getUser();if(a||!t)throw Error("User not authenticated");let l=r.from("notes").select("*",{count:"exact",head:!0}).eq("user_id",t.id);e&&(l=l.eq("folder_id",e));let{count:o,error:s}=await l;if(s)throw s;return o||0}static async getFolders(){let{data:e,error:t}=await r.from("folders").select("*").order("name");if(t)throw t;return(e||[]).map(n)}static async createFolder(e,t){let{data:{user:a},error:l}=await r.auth.getUser();if(l||!a)throw Error("User not authenticated");let{data:o,error:s}=await r.from("folders").insert({name:e,parent_id:t||null,user_id:a.id}).select().single();if(s)throw s;return n(o)}static async updateFolder(e,t){let{data:a,error:l}=await r.from("folders").update(t).eq("id",e).select().single();if(l)throw l;return n(a)}static async deleteFolder(e){let{error:t}=await r.from("folders").delete().eq("id",e);if(t)throw t}static async getLabels(){let{data:e,error:t}=await r.from("labels").select("*").order("name");if(t)throw t;return(e||[]).map(i)}static async createLabel(e,t){let{data:{user:a},error:l}=await r.auth.getUser();if(l||!a)throw Error("User not authenticated");let{data:o,error:s}=await r.from("labels").insert({name:e,color:t,user_id:a.id}).select().single();if(s)throw s;return i(o)}static async updateLabel(e,t){let{data:a,error:l}=await r.from("labels").update(t).eq("id",e).select().single();if(l)throw l;return i(a)}static async deleteLabel(e){let{error:t}=await r.from("labels").delete().eq("id",e);if(t)throw t}static async getNoteCounts(e){let t={},{data:{user:a},error:l}=await r.auth.getUser();if(l||!a)throw Error("User not authenticated");let{data:o,error:s}=await r.from("notes").select("folder_id").eq("user_id",a.id);if(s)throw s;return e.forEach(e=>{t[e]=(o||[]).filter(t=>t.folder_id===e).length}),t}static async getLabelCounts(e){let t={},{data:{user:a},error:l}=await r.auth.getUser();if(l||!a)throw Error("User not authenticated");let{data:o,error:s}=await r.from("notes").select("labels").eq("user_id",a.id);if(s)throw s;return e.forEach(e=>{t[e]=(o||[]).filter(t=>t.labels&&t.labels.includes(e)).length}),t}}let f=(0,o.createContext)(void 0);function b(e){let{children:t}=e,[a,r]=(0,o.useState)({notes:[],folders:[],labels:[],selectedNoteId:void 0,selectedFolderId:void 0,selectedLabelId:void 0}),[d,n]=(0,o.useState)(!0),[i,c]=(0,o.useState)(null),[b,h]=(0,o.useState)({all:0,byFolder:{},byLabel:{}}),[g,w]=(0,o.useState)({notes:{page:1,limit:10,totalCount:0,totalPages:0,hasNextPage:!1,hasPrevPage:!1},folders:{page:1,limit:5,totalCount:0,totalPages:0,hasNextPage:!1,hasPrevPage:!1},labels:{page:1,limit:5,totalCount:0,totalPages:0,hasNextPage:!1,hasPrevPage:!1}}),m=(0,o.useCallback)(async e=>{try{return await u.getNoteCount(e)}catch(e){return console.error("Failed to get note count:",e),0}},[]),y=(0,o.useCallback)(async(e,t)=>{try{console.log("Refreshing note counts with folders...");let a=await m();console.log("Total count:",a);let l=e.map(e=>e.id),o=await u.getNoteCounts(l),s=t.map(e=>e.name),r=await u.getLabelCounts(s),d={};t.forEach(e=>{d[e.id]=r[e.name]||0}),h({all:a,byFolder:o,byLabel:d}),console.log("Note counts updated:",{all:a,byFolder:o,byLabel:d})}catch(e){console.error("Failed to refresh note counts:",e),h({all:0,byFolder:{},byLabel:{}})}},[m]),p=(0,o.useCallback)(async()=>{try{console.log("Refreshing note counts...");let e=await m();console.log("Total count:",e);let t=a.folders,l=a.labels,o=t.map(e=>e.id),s=await u.getNoteCounts(o),r=l.map(e=>e.name),d=await u.getLabelCounts(r),n={};l.forEach(e=>{n[e.id]=d[e.name]||0}),h({all:e,byFolder:s,byLabel:n}),console.log("Note counts updated:",{all:e,byFolder:s,byLabel:n})}catch(e){console.error("Failed to refresh note counts:",e),h({all:0,byFolder:{},byLabel:{}})}},[m]),I=(0,o.useCallback)(async e=>{try{console.log("Refreshing count for folder ".concat(e,"..."));let t=await m(e);console.log("Folder ".concat(e," count: ").concat(t)),h(a=>{let l={...a,byFolder:{...a.byFolder,[e]:t}};return console.log("Updated noteCounts state for folder ".concat(e,":"),l),l})}catch(e){console.error("Failed to refresh folder count:",e)}},[m]),F=(0,o.useCallback)(async function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1;try{n(!0),c(null);let[t,a,l]=await Promise.all([u.getNotes(e,10),u.getFolders(),u.getLabels()]);r({notes:t.data,folders:a,labels:l});let o=Math.ceil(t.count/10);w({notes:{page:e,limit:10,totalCount:t.count,totalPages:o,hasNextPage:e<o,hasPrevPage:e>1},folders:{page:1,limit:5,totalCount:a.length,totalPages:1,hasNextPage:!1,hasPrevPage:!1},labels:{page:1,limit:5,totalCount:l.length,totalPages:1,hasNextPage:!1,hasPrevPage:!1}}),await y(a,l)}catch(e){c(e instanceof Error?e.message:"Failed to load data")}finally{n(!1)}},[]);(0,o.useEffect)(()=>{let e=(0,s.U)(),t=!1;(async()=>{try{let{data:{session:a}}=await e.auth.getSession();a&&!t&&(t=!0,await F())}catch(e){}})();let{data:a}=e.auth.onAuthStateChange(e=>{"SIGNED_IN"!==e&&"TOKEN_REFRESHED"!==e||t||(t=!0,F())});return()=>{try{a.subscription.unsubscribe()}catch(e){}}},[]);let N=(0,o.useCallback)(async e=>{let t=g[e].page;g[e].hasNextPage&&await v(e,t+1)},[g]),C=(0,o.useCallback)(async e=>{let t=g[e].page;g[e].hasPrevPage&&await v(e,t-1)},[g]),v=(0,o.useCallback)(async(e,t)=>{try{if("notes"===e){let e=await u.getNotes(t,10),a=Math.ceil(e.count/10);r(t=>({...t,notes:e.data})),w(l=>({...l,notes:{page:t,limit:10,totalCount:e.count,totalPages:a,hasNextPage:t<a,hasPrevPage:t>1}}))}else if("folders"===e){let e=await u.getFolders();r(t=>({...t,folders:e})),await y(e,a.labels)}else if("labels"===e){let e=await u.getLabels();r(t=>({...t,labels:e}))}}catch(t){c(t instanceof Error?t.message:"Failed to load ".concat(e))}},[]),P=(0,o.useCallback)(async function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",a=arguments.length>2?arguments[2]:void 0;try{let l=await u.createNote(e,t,a);return r(e=>({...e,notes:[l,...e.notes],selectedNoteId:l.id})),await p(),l}catch(e){throw c(e instanceof Error?e.message:"Failed to create note"),e}},[]),E=(0,o.useCallback)(async(e,t)=>{try{let a=await u.updateNote(e,t);return new Promise(t=>{r(l=>{let o=l.notes.map(t=>t.id===e?a:t),s={...l,notes:o};return setTimeout(()=>t(a),0),s})})}catch(e){throw c(e instanceof Error?e.message:"Failed to update note"),e}},[p]),L=(0,o.useCallback)(async e=>{try{await u.deleteNote(e),r(t=>({...t,notes:t.notes.filter(t=>t.id!==e),selectedNoteId:t.selectedNoteId===e?void 0:t.selectedNoteId})),await p()}catch(e){throw c(e instanceof Error?e.message:"Failed to delete note"),e}},[p]),_=(0,o.useCallback)(async(e,t)=>{try{let a=await u.createFolder(e,t);return r(e=>({...e,folders:[a,...e.folders]})),await p(),a}catch(e){throw c(e instanceof Error?e.message:"Failed to create folder"),e}},[p]),k=(0,o.useCallback)(async(e,t)=>{try{let a=await u.updateFolder(e,t);return r(t=>({...t,folders:t.folders.map(t=>t.id===e?a:t)})),a}catch(e){throw c(e instanceof Error?e.message:"Failed to update folder"),e}},[]),U=(0,o.useCallback)(async e=>{try{await u.deleteFolder(e),r(t=>({...t,folders:t.folders.filter(t=>t.id!==e),notes:t.notes.map(t=>t.folderId===e?{...t,folderId:void 0}:t),selectedFolderId:t.selectedFolderId===e?void 0:t.selectedFolderId})),await p()}catch(e){throw c(e instanceof Error?e.message:"Failed to delete folder"),e}},[p]),x=(0,o.useCallback)(async(e,t)=>{try{let a=await u.createLabel(e,t);return r(e=>({...e,labels:[a,...e.labels]})),a}catch(e){throw c(e instanceof Error?e.message:"Failed to create label"),e}},[]),S=(0,o.useCallback)(async(e,t)=>{try{let a=await u.updateLabel(e,t);return r(t=>({...t,labels:t.labels.map(t=>t.id===e?a:t)})),a}catch(e){throw c(e instanceof Error?e.message:"Failed to update label"),e}},[]),q=(0,o.useCallback)(async e=>{try{console.log("Attempting to delete label with id: ".concat(e)),await u.deleteLabel(e);let t=a.labels.find(t=>t.id===e);if(!t){console.warn("Label to delete not found in state");return}console.log('Removing label "'.concat(t.name,'" from state and notes')),r(a=>({...a,labels:a.labels.filter(t=>t.id!==e),notes:a.notes.map(e=>({...e,labels:e.labels.filter(e=>e!==t.name)}))})),console.log("Label deletion completed successfully")}catch(e){throw console.error("Label deletion error:",e),c(e instanceof Error?e.message:"Failed to delete label"),e}},[a.labels]),M=(0,o.useCallback)(e=>{r(t=>({...t,selectedNoteId:e}))},[]),O=(0,o.useCallback)(async e=>{r(t=>({...t,selectedFolderId:e,selectedLabelId:void 0}))},[]),A=(0,o.useCallback)(async e=>{r(t=>({...t,selectedLabelId:e,selectedFolderId:void 0}))},[]),R=(0,o.useMemo)(()=>a.notes.find(e=>e.id===a.selectedNoteId),[a.notes,a.selectedNoteId]),J=(0,o.useMemo)(()=>a.folders.find(e=>e.id===a.selectedFolderId),[a.folders,a.selectedFolderId]),z=(0,o.useMemo)(()=>a.labels.find(e=>e.id===a.selectedLabelId),[a.labels,a.selectedLabelId]),D=(0,o.useMemo)(()=>{let e=a.notes;if(a.selectedFolderId&&(e=e.filter(e=>e.folderId===a.selectedFolderId)),a.selectedLabelId){let t=a.labels.find(e=>e.id===a.selectedLabelId);t&&(e=e.filter(e=>e.labels.includes(t.name)))}return e},[a.notes,a.selectedFolderId,a.selectedLabelId,a.labels]),T={notes:a.notes,folders:a.folders,labels:a.labels,selectedNote:R,selectedFolder:J,selectedLabel:z,filteredNotes:D,isLoading:d,error:i,pagination:g,noteCounts:b,createNote:P,updateNote:E,deleteNote:L,createFolder:_,updateFolder:k,deleteFolder:U,createLabel:x,updateLabel:S,deleteLabel:q,selectNote:M,selectFolder:O,selectLabel:A,loadData:F,loadNextPage:N,loadPrevPage:C,loadDataByType:v,getNoteCount:m,refreshNoteCounts:p,refreshFolderCount:I};return(0,l.jsx)(f.Provider,{value:T,children:t})}function h(){let e=(0,o.useContext)(f);if(void 0===e)throw Error("useNotes must be used within a NotesProvider");return e}}}]);